{"version":3,"sources":["services/pokemon.js","styles/colors.js","components/PokemonCard/styles.js","components/PokemonCard/index.js","pages/PokemonList/styles.js","pages/PokemonList/index.js","pages/PokemonData/styles.js","pages/PokemonData/index.js","App.js","serviceWorker.js","reducers.js","index.js","configureStore.js","images/pokeball.png"],"names":["pokemonSlice","createSlice","name","initialState","isLoading","pokemonList","nextUrl","prevUrl","selectedPokemon","reducers","setLoading","state","action","payload","setPokemonList","setNextUrl","setPrevUrl","setSelectedPokemon","actions","getPokemonListAsync","apiUrl","dispatch","getState","a","axios","get","res","Promise","all","data","results","map","pokemon","url","pokemonRecord","id","types","sprites","_pokemonData","next","previous","console","error","selectPokemon","TYPE_COLORS","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Wrapper","styled","div","Loader","Meta","Card","PokemonCard","pokemonState","useSelector","to","hoverable","cover","src","other","front_default","fallbackImage","pokeball","initialImage","LoadingOutlined","className","alt","loading","avatar","active","title","i","index","color","type","key","PokemonList","useDispatch","useEffect","length","handleNext","handlePrev","shape","size","onClick","disabled","icon","LinkOutlined","href","target","rel","Header","Content","Stats","ImageLoader","PokemonData","history","useHistory","location","pathname","pokemonData","stats","weight","species","height","pokemonSpecies","flavorTextEntries","flavor_text_entries","flavorText","find","language","description","flavor_text","artwork","spriteFront","LeftOutlined","goBack","stat","base_stat","percent","success","showInfo","status","App","basename","exact","path","component","Boolean","window","hostname","match","combineReducers","pokemonReducer","preloadedState","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.f8e28965.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\nconst API = 'https://pokeapi.co/api/v2';\r\n\r\nexport const pokemonSlice = createSlice({\r\n  name: 'pokemon',\r\n  initialState: {\r\n    isLoading: true,\r\n    pokemonList: [],\r\n    nextUrl: '',\r\n    prevUrl: '',\r\n    selectedPokemon: {},\r\n  },\r\n  reducers: {\r\n    setLoading: (state, action) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setPokemonList: (state, action) => {\r\n      state.pokemonList = action.payload;\r\n    },\r\n    setNextUrl: (state, action) => {\r\n      state.nextUrl = action.payload;\r\n    },\r\n    setPrevUrl: (state, action) => {\r\n      state.prevUrl = action.payload;\r\n    },\r\n    setSelectedPokemon: (state, action) => {\r\n      state.selectedPokemon = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoading,\r\n  setPokemonList,\r\n  setNextUrl,\r\n  setPrevUrl,\r\n  setSelectedPokemon,\r\n} = pokemonSlice.actions;\r\n\r\nexport function getPokemonListAsync(apiUrl) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n\r\n      const res = await axios.get(apiUrl);\r\n\r\n      let _pokemonData = await Promise.all(\r\n        res.data.results.map(async (pokemon) => {\r\n          let pokemonRecord = await axios.get(pokemon.url);\r\n          const { id, name, types, sprites } = pokemonRecord.data;\r\n          return { name, id, types, sprites };\r\n        }),\r\n      );\r\n      dispatch(setPokemonList(_pokemonData));\r\n\r\n      dispatch(setNextUrl(res.data.next));\r\n      dispatch(setPrevUrl(res.data.previous));\r\n\r\n      dispatch(setLoading(false));\r\n    } catch (err) {\r\n      console.error('error');\r\n    }\r\n  };\r\n}\r\n\r\nexport function getPokemonDataAsync(url) {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n      const res = await axios.get(`${API}/pokemon${url}`);\r\n      const pokemonData = res.data;\r\n      const {\r\n        name,\r\n        id,\r\n        sprites,\r\n        stats,\r\n        weight,\r\n        types,\r\n        species,\r\n        height,\r\n      } = pokemonData;\r\n\r\n      let pokemonSpecies = await axios.get(species.url);\r\n      let flavorTextEntries = pokemonSpecies.data.flavor_text_entries;\r\n      let flavorText = flavorTextEntries.find((i) => i.language.name === 'en');\r\n      let description = flavorText.flavor_text;\r\n      let artwork = sprites.other['official-artwork'].front_default;\r\n      let spriteFront = sprites.front_default;\r\n\r\n      dispatch(\r\n        setSelectedPokemon({\r\n          name,\r\n          id,\r\n          stats,\r\n          weight,\r\n          height,\r\n          types,\r\n          description,\r\n          artwork,\r\n          spriteFront,\r\n        }),\r\n      );\r\n      dispatch(setLoading(false));\r\n    } catch (error) {\r\n      console.error('error');\r\n    }\r\n  };\r\n}\r\n\r\nexport const selectPokemon = (state) => state.pokemon;\r\n\r\nexport default pokemonSlice.reducer;\r\n","export const TYPE_COLORS = {\r\n  bug: '#729f3f',\r\n  dragon: '#53a4cf',\r\n  fairy: '#fdb9e9',\r\n  fire: '#fd7d24',\r\n  ghost: '#7b62a3',\r\n  ground: '#f7de3f',\r\n  normal: '#a4acaf',\r\n  pyschic: '#f366b9',\r\n  steel: '#9eb7b',\r\n  dark: '#707070',\r\n  electric: '#eed535',\r\n  fighting: '#d56723',\r\n  flying: '#3dc7ef',\r\n  grass: '#9bcc50',\r\n  ice: '#51c4e7',\r\n  poison: '#b97fc9',\r\n  rock: '#a38c21',\r\n  water: '#4592c4'\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  @media (max-width: 600px) {\r\n    max-width: 350px;\r\n    width: 100%;\r\n    margin: auto;\r\n  }\r\n  .ant-card-cover {\r\n    background: #f1f1f1;\r\n    padding: 30px 0;\r\n    min-height: 210px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n  }\r\n  .ant-card-cover img {\r\n    width: 90%;\r\n    object-fit: contain;\r\n    height: 90%;\r\n    max-height: 150px;\r\n    margin: auto;\r\n  }\r\n  .ant-card-meta-title {\r\n    text-transform: uppercase;\r\n    text-align: center;\r\n  }\r\n  .tag {\r\n    margin-top: 10px;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport const Loader = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .loader {\r\n    font-size: 50px;\r\n    color: blue;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectPokemon } from 'services/pokemon';\r\nimport { Skeleton, Card, Tag } from 'antd';\r\nimport { LoadingOutlined } from '@ant-design/icons';\r\nimport { Link } from 'react-router-dom';\r\nimport { TYPE_COLORS } from 'styles/colors';\r\nimport ReactImageFallback from 'react-image-fallback';\r\nimport pokeball from 'images/pokeball.png';\r\n\r\nimport * as S from './styles';\r\n\r\nconst { Meta } = Card;\r\n\r\nfunction PokemonCard({ pokemon }) {\r\n  const pokemonState = useSelector(selectPokemon);\r\n  const { name, sprites, types, id } = pokemon;\r\n\r\n  return (\r\n    <Link to={`/${id}`}>\r\n      <S.Wrapper>\r\n        <Card\r\n          hoverable\r\n          cover={\r\n            <ReactImageFallback\r\n              src={sprites.other['official-artwork'].front_default}\r\n              fallbackImage={pokeball}\r\n              initialImage={\r\n                <S.Loader>\r\n                  <LoadingOutlined className=\"loader\" />\r\n                </S.Loader>\r\n              }\r\n              alt={name}\r\n            />\r\n          }\r\n        >\r\n          <Skeleton loading={pokemonState.isLoading} avatar active>\r\n            <Meta title={name} />\r\n            <div className=\"tag\">\r\n              {types.map((i, index) => (\r\n                <Tag color={TYPE_COLORS[i.type.name]} key={index}>\r\n                  {i.type.name}\r\n                </Tag>\r\n              ))}\r\n            </div>\r\n          </Skeleton>\r\n        </Card>\r\n      </S.Wrapper>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default PokemonCard;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  padding: 40px;\r\n  min-height: 100vh;\r\n  @media (max-width: 600px) {\r\n    padding: 40px 20px;\r\n  }\r\n\r\n  .btn-group {\r\n    display: flex;\r\n    align-items: center;\r\n    @media (max-width: 600px) {\r\n      margin: 20px 0;\r\n    }\r\n    .divider {\r\n      width: 20px;\r\n      display: block;\r\n    }\r\n    button {\r\n      width: 120px;\r\n    }\r\n  }\r\n  > header {\r\n    margin: 0 auto 20px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    max-width: 1200px;\r\n    @media (max-width: 600px) {\r\n      flex-direction: column;\r\n    }\r\n    aside {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      img {\r\n        width: 50px;\r\n        margin-right: 20px;\r\n      }\r\n    }\r\n    h1 {\r\n      font-size: 32px;\r\n      font-weight: 700;\r\n      color: #f71b1b;\r\n\r\n      span {\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n  > section {\r\n    max-width: 1200px;\r\n    margin: auto;\r\n    width: 100%;\r\n\r\n    .pokemon-list {\r\n      display: grid;\r\n      grid-template-columns: repeat(4, 1fr);\r\n      column-gap: 20px;\r\n      row-gap: 20px;\r\n\r\n      @media (max-width: 1000px) {\r\n        grid-template-columns: repeat(3, 1fr);\r\n      }\r\n      @media (max-width: 800px) {\r\n        grid-template-columns: repeat(2, 1fr);\r\n      }\r\n      @media (max-width: 600px) {\r\n        grid-template-columns: repeat(1, 1fr);\r\n      }\r\n    }\r\n  }\r\n  > footer {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    margin: 30px auto 0;\r\n    width: 100%;\r\n    max-width: 1200px;\r\n    @media (max-width: 600px) {\r\n      flex-direction: column;\r\n\r\n      .ant-tag {\r\n        order: 1;\r\n      }\r\n      .btn-group {\r\n        order: 0;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Loader = styled.div`\r\n  width: 100%;\r\n  height: 80vh;\r\n  margin: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .loader {\r\n    font-size: 50px;\r\n    color: blue;\r\n  }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPokemonListAsync, selectPokemon } from 'services/pokemon';\r\n\r\nimport { LoadingOutlined, LinkOutlined } from '@ant-design/icons';\r\nimport { Button, Tag } from 'antd';\r\n\r\nimport PokemonCard from 'components/PokemonCard';\r\nimport pokeball from 'images/pokeball.png';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction PokemonList() {\r\n  const dispatch = useDispatch();\r\n  const pokemon = useSelector(selectPokemon);\r\n  const { isLoading, pokemonList } = pokemon;\r\n\r\n  useEffect(() => {\r\n    const API = 'https://pokeapi.co/api/v2';\r\n    if (pokemonList.length === 0) {\r\n      dispatch(getPokemonListAsync(`${API}/pokemon`));\r\n    } \r\n  }, [dispatch, pokemonList.length]);\r\n\r\n  const handleNext = () => {\r\n    dispatch(getPokemonListAsync(pokemon.nextUrl));\r\n  };\r\n  const handlePrev = () => {\r\n    dispatch(getPokemonListAsync(pokemon.prevUrl));\r\n  };\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <header>\r\n        <aside>\r\n          <img src={pokeball} alt=\"\" />\r\n          <h1>\r\n            Poke<span>DEX</span>\r\n          </h1>\r\n        </aside>\r\n        <div className=\"btn-group\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            onClick={handlePrev}\r\n            disabled={pokemon.prevUrl === null}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <span className=\"divider\"></span>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            onClick={handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </header>\r\n      <section>\r\n        {isLoading ? (\r\n          <S.Loader>\r\n            <LoadingOutlined className=\"loader\" />\r\n          </S.Loader>\r\n        ) : (\r\n          <div className=\"pokemon-list\">\r\n            {pokemonList.map((pokemon) => (\r\n              <PokemonCard key={pokemon.name} pokemon={pokemon} />\r\n            ))}\r\n          </div>\r\n        )}\r\n      </section>\r\n      <footer>\r\n        <Tag icon={<LinkOutlined />} color=\"magenta\">\r\n          <a\r\n            href=\"https://pokeapi.co/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            API Source: https://pokeapi.co/\r\n          </a>\r\n        </Tag>\r\n        <div className=\"btn-group\">\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            onClick={handlePrev}\r\n            disabled={pokemon.prevUrl === null}\r\n          >\r\n            Previous\r\n          </Button>\r\n          <span className=\"divider\"></span>\r\n          <Button\r\n            type=\"primary\"\r\n            shape=\"round\"\r\n            size=\"large\"\r\n            onClick={handleNext}\r\n          >\r\n            Next\r\n          </Button>\r\n        </div>\r\n      </footer>\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default PokemonList;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 100%;\r\n  padding: 40px;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  @media (max-width: 600px) {\r\n    padding: 40px 20px;\r\n  }\r\n  > section {\r\n    max-width: 1200px;\r\n    margin: auto;\r\n    width: 100%;\r\n    background: #fff;\r\n    border-radius: 6px;\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\r\n  }\r\n`;\r\n\r\nexport const Header = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 10px 20px;\r\n  background: #f1f1f1;\r\n\r\n  h2 {\r\n    font-size: 24px;\r\n    font-weight: 700;\r\n    color: #f71b1b;\r\n    text-transform: uppercase;\r\n    margin-left: 20px;\r\n    @media (max-width: 600px) {\r\n      font-size: 18px;\r\n      margin-left: 10px;\r\n    }\r\n\r\n    span {\r\n      color: #333;\r\n      margin-right: 10px;\r\n    }\r\n  }\r\n  .tag {\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n  }\r\n  > section {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  padding: 30px;\r\n\r\n  > header {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    @media (max-width: 600px) {\r\n      flex-direction: column;\r\n    }\r\n\r\n    > figure {\r\n      flex: 0 0 350px;\r\n      height: 300px;\r\n      @media (max-width: 900px) {\r\n        flex: 0 0 200px;\r\n      }\r\n\r\n      img {\r\n        object-fit: contain;\r\n        width: 100%;\r\n        height: 100%;\r\n      }\r\n    }\r\n    > article {\r\n      flex: 1;\r\n      margin-left: 30px;\r\n      @media (max-width: 600px) {\r\n        margin: 20px 0 0 0;\r\n      }\r\n\r\n      h3 {\r\n        margin-bottom: 30px;\r\n      }\r\n\r\n      > aside {\r\n        margin-top: 20px;\r\n        display: flex;\r\n        justify-content: space-between;\r\n        align-items: center;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Stats = styled.div`\r\n  > section {\r\n    display: flex;\r\n    align-items: center;\r\n  }\r\n  .stat-label {\r\n    flex: 0 0 150px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding-right: 10px;\r\n\r\n    small {\r\n      font-size: 10px;\r\n      text-transform: uppercase;\r\n      color: #333;\r\n      font-weight: 700;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Loader = styled.div`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  margin: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .loader {\r\n    font-size: 50px;\r\n    color: blue;\r\n  }\r\n`;\r\n\r\nexport const ImageLoader = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  margin: auto;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .loader {\r\n    font-size: 50px;\r\n    color: blue;\r\n  }\r\n`;","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPokemonDataAsync, selectPokemon } from 'services/pokemon';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { TYPE_COLORS } from 'styles/colors';\r\nimport { Tag, Button, Tooltip, Progress } from 'antd';\r\nimport { LoadingOutlined, LeftOutlined } from '@ant-design/icons';\r\nimport ReactImageFallback from 'react-image-fallback';\r\nimport pokeball from 'images/pokeball.png';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction PokemonData() {\r\n  let history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const pokemonState = useSelector(selectPokemon);\r\n\r\n  useEffect(() => {\r\n    dispatch(getPokemonDataAsync(history.location.pathname));\r\n  }, [dispatch, history.location.pathname]);\r\n\r\n  const {\r\n    name,\r\n    id,\r\n    stats,\r\n    weight,\r\n    height,\r\n    types,\r\n    description,\r\n    artwork,\r\n    spriteFront,\r\n  } = pokemonState.selectedPokemon;\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      {pokemonState.isLoading ? (\r\n        <S.Loader>\r\n          <LoadingOutlined className=\"loader\" />\r\n        </S.Loader>\r\n      ) : (\r\n        <section>\r\n          <S.Header>\r\n            <section>\r\n              <Tooltip title=\"Go Back\">\r\n                <Button\r\n                  shape=\"circle\"\r\n                  icon={<LeftOutlined />}\r\n                  onClick={() => history.goBack()}\r\n                />\r\n              </Tooltip>\r\n              <h2>\r\n                <span>#{id}</span>\r\n                {name}\r\n              </h2>\r\n            </section>\r\n          </S.Header>\r\n          <S.Content>\r\n            <header>\r\n              <figure>\r\n                <ReactImageFallback\r\n                  src={artwork !== null ? artwork : spriteFront}\r\n                  fallbackImage={pokeball}\r\n                  initialImage={\r\n                    <S.ImageLoader>\r\n                      <LoadingOutlined className=\"loader\" />\r\n                    </S.ImageLoader>\r\n                  }\r\n                  alt={name}\r\n                />\r\n              </figure>\r\n              <article>\r\n                <h3>{description}</h3>\r\n                <S.Stats>\r\n                  {stats && stats.map((i, index) => (\r\n                    <section key={index}>\r\n                      <div className=\"stat-label\">\r\n                        <small>{i.stat.name}</small>\r\n                        <small>{i.base_stat}</small>\r\n                      </div>\r\n                      <Progress\r\n                        percent={i.base_stat > 100 ? 100 : i.base_stat}\r\n                        success={{\r\n                          percent: i.base_stat > 100 ? i.base_stat - 100 : 0,\r\n                        }}\r\n                        showInfo={false}\r\n                        status=\"active\"\r\n                      />\r\n                    </section>\r\n                  ))}\r\n                </S.Stats>\r\n                <aside>\r\n                  {types && (\r\n                    <div className=\"tag\">\r\n                      {types.map((i, index) => (\r\n                        <Tag color={TYPE_COLORS[i.type.name]} key={index}>\r\n                          {i.type.name}\r\n                        </Tag>\r\n                      ))}\r\n                    </div>\r\n                  )}\r\n                  <div>\r\n                    <Tag color=\"cyan\">Weight: {weight}</Tag>\r\n                    <Tag color=\"blue\">Height: {height}</Tag>\r\n                  </div>\r\n                </aside>\r\n              </article>\r\n            </header>\r\n          </S.Content>\r\n        </section>\r\n      )}\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default PokemonData;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport PokemonList from 'pages/PokemonList';\r\nimport PokemonData from 'pages/PokemonData';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Router basename=\"/pokedex\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={PokemonList} />\r\n          <Route exact path=\"/:id\" component={PokemonData} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport pokemonReducer from 'services/pokemon';\r\n\r\nexport default combineReducers({\r\n  pokemon: pokemonReducer,\r\n});\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport 'styles/global.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nconst renderApp = () =>\r\n  render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n  );\r\n\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n  module.hot.accept('./App', renderApp);\r\n}\r\n\r\nrenderApp()\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default function configureAppStore(preloadedState) {\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [...getDefaultMiddleware()],\r\n    preloadedState,\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\r\n  }\r\n\r\n  return store;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/pokeball.5f8a4ead.png\";"],"sourceRoot":""}