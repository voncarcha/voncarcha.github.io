{"version":3,"sources":["images/icon-confirmed.svg","images/icon-deaths.svg","images/icon-recovered.svg","modules/summary.js","modules/dayone.js","components/Cards/styles.js","components/Cards/index.js","components/Search/styles.js","components/Search/index.js","components/Charts/styles.js","components/Charts/index.js","pages/Home/styles.js","pages/Home/index.js","App.js","serviceWorker.js","reducers.js","index.js","configureStore.js"],"names":["module","exports","summarySlice","createSlice","name","initialState","isLoading","data","total","confirmed","deaths","recovered","reducers","setLoading","state","action","payload","setData","setTotal","actions","selectIsLoading","summary","selectSummaryData","selectTotal","dayoneSlice","getDayoneAsync","country","dispatch","getState","a","global","Global","TotalConfirmed","TotalDeaths","TotalRecovered","setSummaryLoading","axios","get","res","flattenData","forEach","i","push","Confirmed","Deaths","Recovered","active","Active","countryName","Country","date","moment","Date","format","reduceData","reduce","acc","obj","existObj","find","countries","Countries","selectedCountry","c","Slug","console","log","dayone","selectDayoneData","Wrapper","styled","ul","Cards","title","src","iconConfirmed","alt","value","className","iconDeaths","iconRecovered","div","Option","Select","Search","useDispatch","showSearch","style","width","placeholder","onChange","filterOption","input","option","children","toLowerCase","indexOf","defaultValue","size","map","index","key","Charts","dayoneData","length","height","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","labelFormatter","type","stroke","fillOpacity","fill","tip","Home","summaryIsLoading","useSelector","selectSummaryIsLoading","dayoneIsLoading","selectDayoneIsLoading","useEffect","message","error","App","basename","exact","path","component","to","Boolean","window","location","hostname","match","combineReducers","summaryReducer","dayoneReducer","preloadedState","store","configureStore","reducer","rootReducer","middleware","getDefaultMiddleware","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f30e9506.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-confirmed.02153656.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-deaths.ec653c01.svg\";","module.exports = __webpack_public_path__ + \"static/media/icon-recovered.b0e9dc0f.svg\";","import { createSlice } from '@reduxjs/toolkit';\r\nimport { message } from 'antd';\r\nimport axios from 'axios';\r\n\r\nexport const summarySlice = createSlice({\r\n  name: 'summary',\r\n  initialState: {\r\n    isLoading: false,\r\n    data: {},\r\n    total: {\r\n      confirmed: 0,\r\n      deaths: 0,\r\n      recovered: 0,\r\n    },\r\n  },\r\n  reducers: {\r\n    setLoading: (state, action) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n    setTotal: (state, action) => {\r\n      state.total = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setLoading,\r\n  setData,\r\n  setTotal,\r\n} = summarySlice.actions;\r\n\r\nconst API = 'https://api.covid19api.com';\r\n\r\nexport function getSummaryAsync() {\r\n  return async (dispatch, getState) => {\r\n    try {\r\n      dispatch(setLoading(true));\r\n\r\n      const res = await axios.get(`${API}/summary`);\r\n      dispatch(setData(res.data));\r\n\r\n      const global = res.data.Global;\r\n      dispatch(\r\n        setTotal({\r\n          confirmed: global.TotalConfirmed,\r\n          deaths: global.TotalDeaths,\r\n          recovered: global.TotalRecovered,\r\n        }),\r\n      );\r\n\r\n      dispatch(setLoading(false));\r\n    } catch (err) {\r\n      message.error('Error: too many request, please refresh');\r\n    }\r\n  };\r\n}\r\n\r\nexport const selectIsLoading = (state) => state.summary.isLoading;\r\nexport const selectSummaryData = (state) => state.summary.data;\r\nexport const selectTotal = (state) => state.summary.total;\r\n\r\nexport default summarySlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nimport { setTotal, setLoading as setSummaryLoading } from 'modules/summary';\r\n\r\nexport const dayoneSlice = createSlice({\r\n  name: 'dayone',\r\n  initialState: {\r\n    isLoading: false,\r\n    data: [],\r\n  },\r\n  reducers: {\r\n    setLoading: (state, action) => {\r\n      state.isLoading = action.payload;\r\n    },\r\n    setData: (state, action) => {\r\n      state.data = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setLoading, setData } = dayoneSlice.actions;\r\n\r\nconst API = 'https://api.covid19api.com';\r\n\r\nexport function getDayoneAsync(country) {\r\n  return async (dispatch, getState) => {\r\n    if (country === 'global') {\r\n      const global = getState().summary.data.Global;\r\n      dispatch(\r\n        setTotal({\r\n          confirmed: global.TotalConfirmed,\r\n          deaths: global.TotalDeaths,\r\n          recovered: global.TotalRecovered,\r\n        }),\r\n      );\r\n      dispatch(setData([]));\r\n    } else {\r\n      try {\r\n        dispatch(setLoading(true));\r\n        dispatch(setSummaryLoading(true));\r\n        const res = await axios.get(`${API}/dayone/country/${country}`);\r\n\r\n        const flattenData = [];\r\n        res.data.forEach((i) => {\r\n          flattenData.push({\r\n            confirmed: i.Confirmed,\r\n            deaths: i.Deaths,\r\n            recovered: i.Recovered,\r\n            active: i.Active,\r\n            countryName: i.Country,\r\n            date: moment(i.Date).format('L'),\r\n          });\r\n        });\r\n\r\n        // merge data with same dates\r\n        const reduceData = flattenData.reduce((acc, obj) => {\r\n          let existObj = acc.find((i) => i.date === obj.date);\r\n          if (existObj) {\r\n            existObj.confirmed = existObj.confirmed + obj.confirmed;\r\n            existObj.deaths = existObj.deaths + obj.deaths;\r\n            existObj.recovered = existObj.recovered + obj.recovered;\r\n            return acc;\r\n          }\r\n          acc.push(obj);\r\n          return acc;\r\n        }, []);\r\n\r\n        const countries = getState().summary.data.Countries;\r\n        const selectedCountry = countries.find((c) => c.Slug === country);\r\n        dispatch(\r\n          setTotal({\r\n            confirmed: selectedCountry.TotalConfirmed,\r\n            deaths: selectedCountry.TotalDeaths,\r\n            recovered: selectedCountry.TotalRecovered,\r\n          }),\r\n        );\r\n\r\n        dispatch(setData(reduceData));\r\n        dispatch(setLoading(false));\r\n        dispatch(setSummaryLoading(false));\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport const selectIsLoading = (state) => state.dayone.isLoading;\r\nexport const selectDayoneData = (state) => state.dayone.data;\r\n\r\nexport default dayoneSlice.reducer;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.ul`\r\n  max-width: 1200px;\r\n  width: 100%;\r\n  margin: 40px auto 60px;\r\n  padding: 0 25px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  @media (max-width: 900px) {\r\n    flex-direction: column;\r\n  }\r\n\r\n  li {\r\n    flex: 0 0 31%;\r\n    @media (max-width: 900px) {\r\n      max-width: 430px;\r\n      width: 100%;\r\n      margin: 0 auto 20px;\r\n    }\r\n\r\n    section {\r\n      display: flex;\r\n      justify-content: space-between;\r\n      align-items: center;\r\n\r\n      img {\r\n        height: 70px;\r\n        @media (max-width: 600px) {\r\n          height: 50px;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .confirmed .ant-statistic-content {\r\n    color: #8884d8;\r\n  }\r\n  .deaths .ant-statistic-content {\r\n    color: #e02828;\r\n  }\r\n  .recovered .ant-statistic-content {\r\n    color: #82ca9d;\r\n  }\r\n  .ant-statistic-content {\r\n    font-size: 34px;\r\n    @media (max-width: 600px) {\r\n      font-size: 24px;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Card, Statistic, Skeleton } from 'antd';\r\n\r\nimport iconConfirmed from 'images/icon-confirmed.svg';\r\nimport iconDeaths from 'images/icon-deaths.svg';\r\nimport iconRecovered from 'images/icon-recovered.svg';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction Cards({ isLoading, total }) {\r\n  return (\r\n    <S.Wrapper>\r\n      <li>\r\n        <Card title=\"Total Confirmed\">\r\n          {isLoading ? (\r\n            <Skeleton active />\r\n          ) : (\r\n            <section>\r\n              <img src={iconConfirmed} alt=\"\" />\r\n              <Statistic value={total.confirmed} className=\"confirmed\" />\r\n            </section>\r\n          )}\r\n        </Card>\r\n      </li>\r\n      <li>\r\n        <Card title=\"Total Deaths\">\r\n          {isLoading ? (\r\n            <Skeleton active />\r\n          ) : (\r\n            <section>\r\n              <img src={iconDeaths} alt=\"\" />\r\n              <Statistic value={total.deaths} className=\"deaths\" />\r\n            </section>\r\n          )}\r\n        </Card>\r\n      </li>\r\n      <li>\r\n        <Card title=\"Total Recovered\">\r\n          {isLoading ? (\r\n            <Skeleton active />\r\n          ) : (\r\n            <section>\r\n              <img src={iconRecovered} alt=\"\" />\r\n              <Statistic value={total.recovered} className=\"recovered\" />\r\n            </section>\r\n          )}\r\n        </Card>\r\n      </li>\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1200px;\r\n  width: 100%;\r\n  margin: 60px auto 40px;\r\n  padding: 0 25px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  @media (max-width: 600px) {\r\n    margin: 40px auto 30px;\r\n  }\r\n\r\n  .ant-select {\r\n    flex: 0 0 50%;\r\n    @media (max-width: 900px) {\r\n      flex: 0 0 100%;\r\n      max-width: 430px;\r\n      width: 100%;\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { Select } from 'antd';\r\n\r\nimport * as S from './styles';\r\n\r\nconst { Option } = Select;\r\n\r\nfunction Search({ countries, getDayoneAsync }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = (value) => dispatch(getDayoneAsync(value));\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <Select\r\n        showSearch\r\n        style={{ width: '100%' }}\r\n        placeholder=\"Select Country\"\r\n        onChange={onChange}\r\n        filterOption={(input, option) =>\r\n          option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\r\n        }\r\n        defaultValue=\"global\" \r\n        size=\"large\"\r\n      >\r\n      <Option value='global'>\r\n        -- Global --\r\n      </Option>\r\n        {countries\r\n          ? countries.map((country, index) => (\r\n              <Option value={country.Slug} key={index}>\r\n                {country.Country}\r\n              </Option>\r\n            ))\r\n          : null}\r\n      </Select>\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1200px;\r\n  width: 100%;\r\n  margin: auto;\r\n  position: relative;\r\n  padding: 0 25px 60px 0;\r\n\r\n  .ant-spin {\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n\r\n  tspan {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport {\r\n  ResponsiveContainer,\r\n  AreaChart,\r\n  Area,\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  Tooltip,\r\n} from 'recharts';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction Charts({ dayoneData, isLoading }) {\r\n  return (\r\n    <S.Wrapper>\r\n      {dayoneData.length !== 0 ? (\r\n        <ResponsiveContainer width=\"100%\" height={350}>\r\n          <AreaChart data={dayoneData}>\r\n            <defs>\r\n              <linearGradient id=\"colorConfirmed\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0} />\r\n              </linearGradient>\r\n              <linearGradient id=\"colorRecovered\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"#82ca9d\" stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor=\"#82ca9d\" stopOpacity={0} />\r\n              </linearGradient>\r\n              <linearGradient id=\"colorDeaths\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                <stop offset=\"5%\" stopColor=\"#e02828\" stopOpacity={0.8} />\r\n                <stop offset=\"95%\" stopColor=\"#e02828\" stopOpacity={0} />\r\n              </linearGradient>\r\n            </defs>\r\n            <XAxis dataKey=\"date\" />\r\n            <YAxis />\r\n            <CartesianGrid strokeDasharray=\"3 3\" />\r\n            <Tooltip labelFormatter={(value) => `${value}`} />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"confirmed\"\r\n              stroke=\"#8884d8\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorConfirmed)\"\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"recovered\"\r\n              stroke=\"#82ca9d\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorRecovered)\"\r\n            />\r\n            <Area\r\n              type=\"monotone\"\r\n              dataKey=\"deaths\"\r\n              stroke=\"#e02828\"\r\n              fillOpacity={1}\r\n              fill=\"url(#colorDeaths)\"\r\n            />\r\n          </AreaChart>\r\n        </ResponsiveContainer>\r\n      ) : null}\r\n      {isLoading ? <Spin tip=\"Fetching data...\" /> : null}\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default Charts;\r\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  h1 {\r\n    margin: 60px 0 0;\r\n    font-weight: 700;\r\n    font-size: 45px;\r\n    text-align: center;\r\n    @media (max-width: 600px) {\r\n      font-size: 28px;\r\n    }\r\n  }\r\n`;\r\n","import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport {\r\n  getSummaryAsync,\r\n  selectIsLoading as selectSummaryIsLoading,\r\n  selectSummaryData,\r\n  selectTotal,\r\n} from 'modules/summary';\r\nimport {\r\n  getDayoneAsync,\r\n  selectIsLoading as selectDayoneIsLoading,\r\n  selectDayoneData,\r\n} from 'modules/dayone';\r\n\r\nimport Cards from 'components/Cards';\r\nimport Search from 'components/Search';\r\nimport Charts from 'components/Charts';\r\n\r\nimport * as S from './styles';\r\n\r\nfunction Home() {\r\n  const dispatch = useDispatch();\r\n  const summaryIsLoading = useSelector(selectSummaryIsLoading);\r\n  const dayoneIsLoading = useSelector(selectDayoneIsLoading);\r\n  const { Countries } = useSelector(selectSummaryData);\r\n  const total = useSelector(selectTotal);\r\n  const dayoneData = useSelector(selectDayoneData);\r\n\r\n  useEffect(() => {\r\n    dispatch(getSummaryAsync());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <h1>COVID19 TRACKER</h1>\r\n\r\n      <Search countries={Countries} getDayoneAsync={getDayoneAsync} />\r\n      <Cards isLoading={summaryIsLoading} total={total} />\r\n      <Charts dayoneData={dayoneData} isLoading={dayoneIsLoading} />\r\n    </S.Wrapper>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Route,\r\n  Switch,\r\n  Redirect,\r\n} from 'react-router-dom';\r\nimport Home from 'pages/Home';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Router basename=\"/covid19-tracker\">\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Home} />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { combineReducers } from '@reduxjs/toolkit';\r\n\r\nimport summaryReducer from 'modules/summary';\r\nimport dayoneReducer from 'modules/dayone';\r\n\r\nexport default combineReducers({\r\n  summary: summaryReducer,\r\n  dayone: dayoneReducer,\r\n});\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport 'common/global.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './configureStore';\r\n\r\nconst store = configureStore();\r\n\r\nconst renderApp = () =>\r\n  render(\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>,\r\n    document.getElementById('root'),\r\n  );\r\n\r\nif (process.env.NODE_ENV !== 'production' && module.hot) {\r\n  module.hot.accept('./App', renderApp);\r\n}\r\n\r\nrenderApp()\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default function configureAppStore(preloadedState) {\r\n  const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: [...getDefaultMiddleware()],\r\n    preloadedState,\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production' && module.hot) {\r\n    module.hot.accept('./reducers', () => store.replaceReducer(rootReducer));\r\n  }\r\n\r\n  return store;\r\n}\r\n"],"sourceRoot":""}